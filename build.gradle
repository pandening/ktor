buildscript {
    ext.kotlin_repository = {
        if (kotlin_version.endsWith('-SNAPSHOT')) return 'https://oss.sonatype.org/content/repositories/snapshots'
        return 'https://dl.bintray.com/kotlin/kotlin-eap'
    }()

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url kotlin_repository }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomic_fu_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
    }
}

ext.configuredVersion = project.hasProperty('releaseVersion') ? project.releaseVersion : project.version
ext.dokkaExcludes = [
    'ktor-server',
    'ktor-samples',
    'ktor-features',
    'ktor-client'
]

ext.globalM2 = "$buildDir/m2"
ext.publishLocal = project.hasProperty('publishLocal')

allprojects {
    group = 'io.ktor'
    version = configuredVersion

    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlinx/' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url kotlin_repository }

        jcenter()
    }

    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-atomicfu'

    kotlin {
        targets {
            fromPreset(presets.jvm, 'jvm')
            fromPreset(presets.js, 'js')
            fromPreset(presets.iosArm32, 'iosArm32')
            fromPreset(presets.iosArm64, 'iosArm64')
            fromPreset(presets.iosX64, 'iosX64')
            fromPreset(presets.macosX64, 'macosX64')
            if (System.getProperty('idea.active') == 'true') {
                fromPreset(presets.macosX64, 'native')
            }
        }

        sourceSets {
            commonMain {
                kotlin.srcDir 'commonMain'
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common', version: kotlin_version
                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-common', version: coroutines_version)
                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-io', version: kotlinx_io_version)
                    implementation "org.jetbrains.kotlinx:atomicfu:$atomic_fu_version"

                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io', version: kotlinx_io_version)
                }
            }
            commonTest {
                kotlin.srcDir 'commonTest'
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                    implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
                }
            }
            jvmMain {
                kotlin.srcDir 'jvmMain'
                resources.srcDir 'resources'

                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: coroutines_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: coroutines_version

                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-io-jvm', version: kotlinx_io_version)
                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-jvm', version: kotlinx_io_version)
                    implementation("org.jetbrains.kotlinx:atomicfu:$atomic_fu_version")

                    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
                    api group: 'com.typesafe', name: 'config', version: '1.3.1'
                }
            }
            jvmTest {
                kotlin.srcDir 'jvmTest'
                resources.srcDir 'test-resources'
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-test'
                    implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                    implementation "junit:junit:$junit_version"

                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version
                    implementation group: 'junit', name: 'junit', version: junit_version

implementation "org.jetbrains.kotlinx:atomicfu:$atomic_fu_version"
                }
            }
            nativeMain {
                kotlin.srcDir 'nativeMain'
                dependencies {
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-native', version: coroutines_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-io-native', version: kotlinx_io_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-native', version: kotlinx_io_version

                    implementation "org.jetbrains.kotlinx:atomicfu:$atomic_fu_version"
                }
            }
            jsMain {
                kotlin.srcDir 'jsMain'
                dependencies {
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-js', version: coroutines_version
                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-io-js', version: kotlinx_io_version)
                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-js', version: kotlinx_io_version)
                    implementation "org.jetbrains.kotlinx:atomicfu-js:$atomic_fu_version"

                }
            }
            jsTest
            configure([iosArm32Main, iosArm64Main, iosX64Main, macosX64Main]) {
                dependsOn nativeMain
            }
        }

    }

    configurations {
        testOutput
    }

    configure([compileKotlinJvm, compileTestKotlinJvm]) {
        kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.Experimental']
    }

    if (project.name != 'ktor-server-core' && project.name.contains('ktor-server')) {
        compileKotlinJvm.kotlinOptions.freeCompilerArgs += [
            '-Xuse-experimental=kotlin.Experimental,io.ktor.server.engine.EngineAPI'
        ]
    }

    apply from: rootProject.file('gradle/dokka.gradle')

//    apply from: rootProject.file('gradle/publish.gradle')

//    if (project.parent != null && project.parent.name == 'ktor-server') {
//        apply from: rootProject.file('gradle/engines.gradle')
//    }
//
//    task sourceJar(type: Jar, dependsOn: classes) {
//        classifier 'sources'
//        from sourceSets.main.kotlin
//        duplicatesStrategy DuplicatesStrategy.EXCLUDE
//        def platformSrc = sourceSets.main.allSource
//        def commonSrc = rootProject.sourceSets.main.allSource
//        from(platformSrc + commonSrc)
//    }
//
//    task emptyJar(type: Jar) {
//        classifier 'javadoc'
//    }
//
//    tasks.build.dependsOn(['sourceJar', 'emptyJar'])

    task jarTest(type: Jar, dependsOn: jvmTestClasses) {
        from kotlin.targets.jvm.compilations.test.output
        classifier = 'test'
    }

    if (project.hasProperty('teamcity')) {
        afterEvaluate {
            tasks.withType(Class.forName('org.gradle.nativeplatform.test.tasks.RunTestExecutable')) {
                args '--ktest_logger=TEAMCITY'
            }
        }
    }
}


//afterReleaseBuild.dependsOn bintrayUpload
